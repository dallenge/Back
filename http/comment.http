### 1. 회원가입
POST 127.0.0.1:8080/user/new
Content-Type: application/json

{
  "userName": "b",
  "email": "b@b.com",
  "password": "123"
}

### 2. 로그인
POST 127.0.0.1:8080/user/login
Content-Type: application/json

{
  "email": "b@b.com",
  "password": "123"
}

> {%
 client.test("Validate", function() { // Validate라는 이름의 테스트를 수행
     client.assert(response.status === 200, "Response status is not 200"); // 응답값이 200이면 통과
     client.assert(response.contentType.mimeType === "application/json", "Expected 'application/json'"); // 응답값이 application/json이면 토과
     client.assert(response.body.token.trim().length > 0); // 토큰 길이가 0보다 크면 통과

     client.log(response.body.token); // 토큰 값 로깅, body에는 응답 받은 json이 객체 형식으로 저장된다. 즉 {token: "value"} 형식으로 token값이 넘어온다
     client.global.set("token", response.body.token); // 토큰 값을 다른 테스트에서도 사용할 수 있게 global set
 })
 %}

### 1. 댓글 생성
POST 127.0.0.1:8080/1/comment/new
Content-Type: multipart/form-data; boundary=boundary
Authorization: Bearer {{token}}
Accept: application/json

--boundary
Content-Disposition: form-data; name="commentDtoImg"; filename="commentDtoImg.jpg

--boundary
Content-Disposition: form-data; name="content"
Content-Type: text/plain

댓글 내용.

### 2. 댓글 좋아요
POST 127.0.0.1:8080/1/like?isLike=0
Authorization: Bearer {{token}}
Accept: application/json

### 3. 댓글 수정
POST 127.0.0.1:8080/1/comment/1
Content-Type: multipart/form-data; boundary=boundary
Authorization: Bearer {{token}}
Accept: application/json

--boundary
Content-Disposition: form-data; name="commentDtoImg"; filename="commentDtoImg.jpg

--boundary
Content-Disposition: form-data; name="content"
Content-Type: text/plain

수정된 댓글 내용.

### 2. 모든 챌린지 조회
GET 127.0.0.1:8080/challenge?page=0&size=1
Authorization: Bearer {{token}}
Accept: application/json

### 3. 이름 또는 카테고리로 챌린지 조회
GET 127.0.0.1:8080/challenge/condition?title=제목 입니다.&category=
Authorization: Bearer {{token}}
Accept: application/json